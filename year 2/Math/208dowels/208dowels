#!/usr/bin/env python3

import sys, os, math, csv
from sys import stdin
from math import factorial, sqrt, exp, pi

data = [[0, 99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 1],
[1, 0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
[2, 0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
[3, 0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34],
[4, 0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 9.84, 11.34],
[5, 0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 11.67, 13.28],
[6, 0.7, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
[7, 1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
[8, 1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
[9, 2.09, 4.17, 5.38, 6.39, 7.63, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67],
[10, 2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]

def fact(limit):
    rez = 1
    i = 2

    while i <= limit:
        rez *= i
        i += 1
    return rez

def combin(n, k):
    nb = fact(k)
    denb1 = fact(n)
    denb2 = fact(k - n)
    denb1 *= denb2

    return nb / denb1

def tab_calc(rez_tab, rezX, count, nb):
    if rez_tab[len(rez_tab) - 1] < 10:
        rez_tab[count - 1] += rez_tab[count - 2]
        rez_tab.pop(count - 2)
        rezX[count - 2] += '-' + str(nb - 1)
        rezX.pop(count - 1)
        nb += 1
        while rez_tab[count - 2] < 10:
            rez_tab[count] += rez_tab[count - 1]
            rez_tab.pop(count - 1)
            rezX[count - 1] += '-' + str(nb)
            nb += 1
            rezX.pop(count)
    return rez_tab, rezX, count, nb

def tab(rez_tab, rezX, rezTX, count, nb):
    for i in range(0, len(rezX)):
        temp = rezX[i].split('-')
        if len(temp) != 1:
            rezX[i] = temp[0] + '-' + temp[len(temp) - 1]
        if i + 1 == len(rezX):
            rezX[i] = temp[0] + '+'
    print(" x\t| ", end="")
    for i in rezX:
        print(i + '\t| ', end="")
    print(" Total")
    rezOX = []
    for i in rez_tab:
        rezOX.append(i)
    print(" Ox\t| ", end="")
    for count in range(0, len(rezOX)):
        print(str(rezOX[count]) + "\t| ", end="")
    print(" 100")
    print(" Tx\t| ", end="")
    for count in range(0, len(rezTX)):
        print("%.1f" % rezTX[count] + "\t| ", end="")
    print(" 100")
    return rezOX

def square_sum(ox, tx):
    rez = 0

    for i in range(0, len(ox)):
        rez += pow(ox[i] - tx[i], 2) / tx[i]
    return rez

def validity(sum, degr):
    i = 1
    found = False

    while i != 13:
        if data[degr][i] <= sum <= data[degr][i + 1]:
            max = data[0][i]
            min = data[0][i + 1]
            found = True
            break
        i += 1
    if not found:
        if data[degr][1] <= sum:
            max = data[0][13]
            ret = 'P < ' + str(max) + '%'
            return ret
        if data[degr][13] >= sum:
            max = data[0][1]
            ret = 'P > ' + str(max) + '%'
            return ret

    ret = str(min) + '% < P < ' + str(max)+'%'
    return ret

def error():
    str = []
    i = 1

    try:
        while (i < len(sys.argv)):
            str.append(int(sys.argv[i]))
            i += 1
    except:
        exit(84)
    if sum(str) != 100 or len(str) != 9:
        exit (84)
    if len(str) < 1:
        exit(84)
    return str

def binomial_law(val):
    rez = 0

    for i in range(0, len(val)):
        rez += (i * val[i])
    rez /= 100 * 100
    return rez

def counting(tab, binomial):
    rezTX = []
    r = 0

    for count in range(0, len(tab) - 1):
        rez = 100 * combin(count, 100) * pow(binomial, count) * pow((1 - binomial), 100 - count)
        r += rez
        rezTX.append(rez)
    rezTX.append(100 - r)
    return rezTX

def loop(tab, rezTX):
    nb = 0
    count = 0
    rezX = []

    while count < len(tab):
        rezX.append(str(nb))
        if count - 1 >= 0 and count + 1 < len(tab) and tab[count] < 10:
            if tab[count - 1] + tab[count] < tab[count + 1] + tab[count]:
                tab[count] += tab[count - 1]
                tab.pop(count - 1)
                rezX[count - 1] += '-' + str(nb)
                nb += 1
                rezX[count] = str(nb)
                rezTX[count] += rezTX[count - 1]
                rezTX.pop(count - 1)
                while tab[count - 1] < 10:
                    tab[count] += tab[count - 1]
                    tab.pop(count - 1)
                    if count < len(rezTX) - 1:
                        rezTX[count] += rezTX[count - 1]
                        rezTX.pop(count - 1)
                    rezX[count - 1] += '-' + str(nb)
                    nb += 1
                    if nb < 9:
                        rezX.append(str(nb))
                    rezX.pop(count)
            else:
                rezTX[count] += rezTX[count + 1]
                rezTX.pop(count+1)
        count += 1
        nb += 1
    return tab, rezTX, rezX, count, nb

def get_tab(rez_tab, rezTX, rezX, count, nb):
    rez_tab, rezX, count, nb = tab_calc(rez_tab, rezX, count, nb)
    rezOX = tab(rez_tab, rezX, rezTX, count, nb)

    return rezOX, rezTX

def print_rez(rezOX, rezTX):
    sum = square_sum(rezOX, rezTX)

    print("Chi-squared:\t\t%.3f"%sum)
    degr = len(rezOX) - 2
    print("Degrees of freedom:\t{}".format(degr))
    print("Fit validity:\t\t" + validity(sum, degr))
    exit(0)

def main():
    tab = error()
    binomial = binomial_law(tab)
    TX = counting(tab, binomial)
    rez_tab, rezTx, rezX, count, nb = loop(tab, TX)
    rezOX, rezTX = get_tab(rez_tab, rezTx, rezX, count, nb)

    print("Distribution:\t\tB(100, %.4f)" % binomial)
    print_rez(rezOX, rezTX)
    return 0

main()
